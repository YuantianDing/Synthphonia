warning: virtual workspace defaulting to `resolver = "1"` despite one or more workspace members being on edition 2021 which implies `resolver = "2"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2021 resolver, specify `workspace.resolver = "2"` in the workspace root's manifest
note: for more details see https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
warning: unused imports: `Cell` and `os::unix::thread`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcast.rs:1:37
  |
1 | use std::{borrow::BorrowMut, cell::{Cell, RefCell}, hash::Hash, ops::Deref, os::unix::thread, pin::Pin, rc::{Rc, Weak}, task::{Co...
  |                                     ^^^^                                    ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `futures_core::Future`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcast.rs:3:5
  |
3 | use futures_core::Future;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Cell` and `os::unix::thread`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcastque.rs:1:37
  |
1 | use std::{borrow::BorrowMut, cell::{Cell, RefCell}, collections::VecDeque, ops::Deref, os::unix::thread, pin::Pin, rc::{Rc, Weak}...
  |                                     ^^^^                                               ^^^^^^^^^^^^^^^^

warning: unused import: `futures_core::Future`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcastque.rs:3:5
  |
3 | use futures_core::Future;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `borrow::BorrowMut`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcast.rs:1:11
  |
1 | use std::{borrow::BorrowMut, cell::{Cell, RefCell}, hash::Hash, ops::Deref, os::unix::thread, pin::Pin, rc::{Rc, Weak}, task::{Co...
  |           ^^^^^^^^^^^^^^^^^

warning: unused import: `hash::Hash`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcast.rs:1:53
  |
1 | use std::{borrow::BorrowMut, cell::{Cell, RefCell}, hash::Hash, ops::Deref, os::unix::thread, pin::Pin, rc::{Rc, Weak}, task::{Co...
  |                                                     ^^^^^^^^^^

warning: unused import: `borrow::BorrowMut`
 --> /Users/dnailz/Projects/dryadsynth/rc_async/src/sync/broadcastque.rs:1:11
  |
1 | use std::{borrow::BorrowMut, cell::{Cell, RefCell}, collections::VecDeque, ops::Deref, os::unix::thread, pin::Pin, rc::{Rc, Weak}...
  |           ^^^^^^^^^^^^^^^^^

warning: `simple-rc-async` (lib) generated 7 warnings (run `cargo fix --lib -p simple-rc-async` to apply 4 suggestions)
warning: unused variable: `i`
   --> synthphonia/src/utils/nested.rs:257:67
    |
257 |         let (i, _) = key.iter().cloned().enumerate().max_by_key(|(i, x)| x.len()).unwrap();
    |                                                                   ^ help: if this is intentional, prefix it with an underscore: `_i`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `i`
   --> synthphonia/src/utils/nested.rs:266:67
    |
266 |         let (i, _) = key.iter().cloned().enumerate().min_by_key(|(i, x)| x.len()).unwrap();
    |                                                                   ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `v`
   --> synthphonia/src/backward/str.rs:153:21
    |
153 |                 let v = exec.data[self.join.1].len().unwrap().listen_once(prob.value).await;
    |                     ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `checksynth`
   --> synthphonia/src/parser/problem.rs:260:48
    |
260 |         let [_, logic, synthproblem, examples, checksynth]: [_; 5] = file.into_inner().collect_vec().try_into().unwrap();
    |                                                ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_checksynth`

warning: unused variable: `i`
   --> synthphonia/src/parser/problem.rs:262:77
    |
262 | ...to_inner().enumerate().map(|(i, pair)| SynthFun::parse(pair)).collect::<Result<Vec<_>, _>>()?;
    |                                 ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `checksat`
   --> synthphonia/src/parser/check.rs:111:45
    |
111 |         let [_, logic, definefun, examples, checksat]: [_; 5] = file.into_inner().collect_vec().try_into().unwrap();
    |                                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_checksat`

warning: unused variable: `a`
   --> synthphonia/src/value.rs:147:24
    |
147 |             Value::Int(a) => None,
    |                        ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `b`
   --> synthphonia/src/value.rs:148:25
    |
148 |             Value::Bool(b) => None,
    |                         ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `s`
   --> synthphonia/src/value.rs:149:26
    |
149 |             Value::Float(s) => None,
    |                          ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `config`
  --> synthphonia/src/expr/cfg.rs:51:36
   |
51 |             prod::ProdRule::Var(s, config) => {
   |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
  --> synthphonia/src/expr/cfg.rs:58:38
   |
58 |             prod::ProdRule::Const(v, config) => Self::Const(*v),
   |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `a`
  --> synthphonia/src/expr/cfg.rs:54:90
   |
54 |                 } else if let Some((a, _)) = problem.cfg.inner.iter().enumerate().find(|(a,b)| &b.0 == s) {
   |                                                                                          ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `i`
   --> synthphonia/src/expr/cfg.rs:271:63
    |
271 |             inner: problem.cfg.inner.iter().enumerate().map(|(i, nt)| NonTerminal {
    |                                                               ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `this`
  --> synthphonia/src/expr/ops/list/map.rs:83:25
   |
83 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usiz...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/expr/ops/list/map.rs:83:67
   |
83 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/expr/ops/list/map.rs:83:118
   |
83 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `this`
  --> synthphonia/src/expr/ops/list/filter.rs:84:25
   |
84 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usiz...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/expr/ops/list/filter.rs:84:67
   |
84 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/expr/ops/list/filter.rs:84:118
   |
84 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `i`
   --> synthphonia/src/expr/ops/bv/mod.rs:154:9
    |
154 |     let i = std::cmp::max(i1, i2);
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `c`
  --> synthphonia/src/expr/mod.rs:57:25
   |
57 |             Expr::Const(c) => 1,
   |                         ^ help: if this is intentional, prefix it with an underscore: `_c`

warning: unused variable: `index`
  --> synthphonia/src/expr/mod.rs:58:23
   |
58 |             Expr::Var(index) => 1,
   |                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `o`
  --> synthphonia/src/forward/data/all_eq.rs:97:39
   |
97 |             hash_map::Entry::Occupied(o) => true,
   |                                       ^ help: if this is intentional, prefix it with an underscore: `_o`

warning: unused variable: `v`
  --> synthphonia/src/forward/data/all_eq.rs:98:37
   |
98 |             hash_map::Entry::Vacant(v) => false,
   |                                     ^ help: if this is intentional, prefix it with an underscore: `_v`

warning: unused variable: `cfg`
  --> synthphonia/src/forward/data/size.rs:26:16
   |
26 |     pub fn new(cfg: &Cfg) -> Self { Self(vec![vec![]].into()) }
   |                ^^^ help: if this is intentional, prefix it with an underscore: `_cfg`

warning: unused variable: `s`
  --> synthphonia/src/forward/data/len.rs:37:13
   |
37 |         let s: &[&[&str]] = value.try_into().unwrap();
   |             ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `p`
  --> synthphonia/src/forward/bridge.rs:46:17
   |
46 |         for (h, p) in self.inner() {
   |                 ^ help: if this is intentional, prefix it with an underscore: `_p`

warning: unused variable: `contain_count`
   --> synthphonia/src/backward/str.rs:179:13
    |
179 | ...   let contain_count: usize = v.iter().zip(delimiter.iter()).filter(|(x, y)| if !y.is_empty() { x.contains(*y) } else { fals...
    |           ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contain_count`

warning: unused variable: `expr`
  --> synthphonia/src/tree_learning/mod.rs:24:34
   |
24 |         if let SubProblem::Ite { expr, entropy, t, f } = self {
   |                                  ^^^^ help: try ignoring the field: `expr: _`

warning: unused variable: `entropy`
  --> synthphonia/src/tree_learning/mod.rs:24:40
   |
24 |         if let SubProblem::Ite { expr, entropy, t, f } = self {
   |                                        ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `a`
  --> synthphonia/src/tree_learning/mod.rs:77:37
   |
77 |         if let SubProblem::Unsolved(a, entropy) = &mut *this.root.borrow_mut() {
   |                                     ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `e`
   --> synthphonia/src/tree_learning/mod.rs:142:28
    |
142 |                 .map(|(i, (e, cb))| {
    |                            ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:195:37
    |
195 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => {
    |                                     ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `bits`
   --> synthphonia/src/tree_learning/mod.rs:208:34
    |
208 |             SubProblem::Unsolved(bits, entropy) => 1,
    |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_bits`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:208:40
    |
208 |             SubProblem::Unsolved(bits, entropy) => 1,
    |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entropy`

warning: unused variable: `i`
   --> synthphonia/src/tree_learning/mod.rs:209:32
    |
209 |             SubProblem::Accept(i) => 1,
    |                                ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `expr`
   --> synthphonia/src/tree_learning/mod.rs:210:31
    |
210 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => 1 + self.size_recursive(tb) + self.size_recursive(fb),
    |                               ^^^^ help: try ignoring the field: `expr: _`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:210:37
    |
210 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => 1 + self.size_recursive(tb) + self.size_recursive(fb),
    |                                     ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:216:40
    |
216 |             SubProblem::Unsolved(bits, entropy) => bits.clone(),
    |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entropy`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:218:37
    |
218 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => {
    |                                     ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `bits`
   --> synthphonia/src/tree_learning/mod.rs:232:34
    |
232 |             SubProblem::Unsolved(bits, entropy) => panic!("Still subproblem remain."),
    |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_bits`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:232:40
    |
232 |             SubProblem::Unsolved(bits, entropy) => panic!("Still subproblem remain."),
    |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entropy`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:234:37
    |
234 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => {
    |                                     ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:245:40
    |
245 |             SubProblem::Unsolved(bits, entropy) => {
    |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entropy`

warning: unused variable: `i`
   --> synthphonia/src/tree_learning/mod.rs:248:32
    |
248 |             SubProblem::Accept(i) => {}
    |                                ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `expr`
   --> synthphonia/src/tree_learning/mod.rs:249:31
    |
249 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => {
    |                               ^^^^ help: try ignoring the field: `expr: _`

warning: unused variable: `entropy`
   --> synthphonia/src/tree_learning/mod.rs:249:37
    |
249 |             SubProblem::Ite { expr, entropy, t: tb, f: fb } => {
    |                                     ^^^^^^^ help: try ignoring the field: `entropy: _`

warning: unused variable: `e`
   --> synthphonia/src/solutions.rs:131:37
    |
131 |             self.solutions.retain(|(e, bits)| !bits.subset(&b));
    |                                     ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `b`
  --> synthphonia/src/text/parsing/mod.rs:96:41
   |
96 |                     res.sort_by_key(|(a,b)| -(a.len() as isize));
   |                                         ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/date.rs:15:25
   |
15 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/date.rs:15:54
   |
15 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/date.rs:15:105
   |
15 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(())}
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `b`
  --> synthphonia/src/text/parsing/date.rs:29:45
   |
29 |                         res.sort_by_key(|(a,b)| -(a.len() as isize));
   |                                             ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `s`
  --> synthphonia/src/text/parsing/date.rs:30:43
   |
30 |                         res.first().map(|(s, c)| c.as_i64().unwrap()).unwrap_or(0_i64)
   |                                           ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `i`
  --> synthphonia/src/text/parsing/date.rs:67:54
   |
67 |                     months.iter().enumerate().find(|(i, s)| ***s == m.name("month").unwrap().as_str()[0..3]).unwrap().0 as u32 + 1
   |                                                      ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/int.rs:16:25
   |
16 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/int.rs:16:54
   |
16 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/int.rs:16:105
   |
16 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(())}
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `s1`
  --> synthphonia/src/text/parsing/int.rs:20:19
   |
20 |     Str -> Int { |s1: &&str| -> Option<i64> {
   |                   ^^ help: if this is intentional, prefix it with an underscore: `_s1`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/month.rs:14:25
   |
14 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/month.rs:14:54
   |
14 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/month.rs:14:105
   |
14 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(())}
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `s1`
  --> synthphonia/src/text/parsing/month.rs:18:19
   |
18 |     Str -> Int { |s1| -> Option<i64> {
   |                   ^^ help: if this is intentional, prefix it with an underscore: `_s1`

warning: unused variable: `i`
  --> synthphonia/src/text/parsing/month.rs:33:62
   |
33 | ...   let month = months.iter().enumerate().find(|(i, s)| ***s == m.name("month").unwrap().as_str()[0..3]).unwrap().0 as u32 + 1;
   |                                                    ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/weekday.rs:18:25
   |
18 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/weekday.rs:18:54
   |
18 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/weekday.rs:18:105
   |
18 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(())}
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `s1`
  --> synthphonia/src/text/parsing/weekday.rs:22:19
   |
22 |     Str -> Int { |s1| -> Option<i64> {
   |                   ^^ help: if this is intentional, prefix it with an underscore: `_s1`

warning: unused variable: `i`
  --> synthphonia/src/text/parsing/weekday.rs:35:58
   |
35 |             let month = months.iter().enumerate().find(|(i, s)| ***s == m.get(0).unwrap().as_str()[0..3]).unwrap().0 as u32 + 1;
   |                                                          ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/time.rs:24:9
   |
24 |         this: &'static ops::Op1Enum,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/time.rs:25:9
   |
25 |         exec: &'static crate::forward::executor::Executor,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/time.rs:26:9
   |
26 |         opnt: [usize; 1],
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `s`
  --> synthphonia/src/text/parsing/time.rs:43:38
   |
43 |                         if let Some((s,c)) =  self.parse_into(s1).first() {
   |                                      ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `this`
  --> synthphonia/src/text/parsing/float.rs:17:25
   |
17 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/parsing/float.rs:17:54
   |
17 |     fn enumerate(&self, this: &'static ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Res...
   |                                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/parsing/float.rs:17:105
   |
17 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(())}
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `s1`
  --> synthphonia/src/text/parsing/float.rs:21:19
   |
21 |     Str -> Int { |s1: &&str| -> Option<i64> {
   |                   ^^ help: if this is intentional, prefix it with an underscore: `_s1`

warning: unused variable: `this`
  --> synthphonia/src/text/formatting/int.rs:51:25
   |
51 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usiz...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/formatting/int.rs:51:67
   |
51 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/formatting/int.rs:51:118
   |
51 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `this`
  --> synthphonia/src/text/formatting/float.rs:74:25
   |
74 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usiz...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/formatting/float.rs:74:67
   |
74 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/formatting/float.rs:74:118
   |
74 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `this`
   --> synthphonia/src/text/formatting/time.rs:109:25
    |
109 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usi...
    |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
   --> synthphonia/src/text/formatting/time.rs:109:67
    |
109 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
    |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
   --> synthphonia/src/text/formatting/time.rs:109:118
    |
109 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
    |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `this`
  --> synthphonia/src/text/formatting/month.rs:53:9
   |
53 |         this: &'static crate::expr::ops::Op1Enum,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/formatting/month.rs:54:9
   |
54 |         exec: &'static crate::forward::executor::Executor,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/formatting/month.rs:55:9
   |
55 |         opnt: [usize; 1],
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `this`
  --> synthphonia/src/text/formatting/weekday.rs:48:25
   |
48 |     fn enumerate(&self, this: &'static crate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usiz...
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `exec`
  --> synthphonia/src/text/formatting/weekday.rs:48:67
   |
48 | ...rate::expr::ops::Op1Enum, exec: &'static crate::forward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_exec`

warning: unused variable: `opnt`
  --> synthphonia/src/text/formatting/weekday.rs:48:118
   |
48 | ...ward::executor::Executor, opnt: [usize; 1]) -> Result<(), ()> { Ok(()) }
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_opnt`

warning: unused variable: `abbv`
  --> synthphonia/src/text/formatting/weekday.rs:93:21
   |
93 | ...   let abbv = if weekday_abbv.contains(m) { Some(true) } else if weekday_full.contains(m) { Some(false) } else { None } ;
   |           ^^^^ help: if this is intentional, prefix it with an underscore: `_abbv`

warning: unused variable: `i`
  --> synthphonia/src/text/formatting/weekday.rs:92:66
   |
92 | ...   let weekday = weekdays.iter().enumerate().find(|(i, s)| ***s == caps.get(0).unwrap().as_str()[0..3]).unwrap().0 as u32 + 1;
   |                                                        ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: field `exceeded_size_limit` is never read
  --> synthphonia/src/forward/data/substr.rs:23:5
   |
17 | pub struct Data {
   |            ---- field in this struct
...
23 |     exceeded_size_limit: bool,
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: methods `cover_recursive`, `unsolved_recursive`, and `unsolved` are never used
   --> synthphonia/src/tree_learning/mod.rs:214:8
    |
60  | impl<'a, 'b> TreeLearning<'a, 'b> {
    | --------------------------------- methods in this implementation
...
214 |     fn cover_recursive(&self, node: SubProb<'a>) -> Bits {
    |        ^^^^^^^^^^^^^^^
...
243 |     fn unsolved_recursive(&self, node: SubProb<'a>, result: &mut Vec<Box<[u128]>>) {
    |        ^^^^^^^^^^^^^^^^^^
...
256 |     fn unsolved(&self) -> Vec<Box<[u128]>> {
    |        ^^^^^^^^

warning: function `conflict` is never used
   --> synthphonia/src/text/formatting/time.rs:195:4
    |
195 | fn conflict(a: Option<bool>, b: Option<bool>) -> Option<Option<bool>> {
    |    ^^^^^^^^

warning: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified
  --> synthphonia/src/backward/mod.rs:69:5
   |
69 |     async fn deduce(&'static self, exec: &'static Executor, value: Problem) -> &'static Expr;
   |     ^^^^^
   |
   = note: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`
   = note: `#[warn(async_fn_in_trait)]` on by default
help: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change
   |
69 -     async fn deduce(&'static self, exec: &'static Executor, value: Problem) -> &'static Expr;
69 +     fn deduce(&'static self, exec: &'static Executor, value: Problem) -> impl std::future::Future<Output = &'static Expr> + Send;
   |

warning: `synthphonia-rs` (bin "synthphonia") generated 98 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.29s
     Running `/Users/dnailz/Projects/dryadsynth/main/target/debug/synthphonia --cfg test/test2map2.sl -vv --no-ite test/test2map2.sl`
[34;1m[1mINFO[0m [36mCFG: 0: (ntString: String) -> ["", ",", (str.++ 0 0), (list.at 3 1), (str.join 3 0), (int.to.str 1), (str.retainLl 0), (str.retainLc 0), (str.retainL 0), (str.retainN 0), (str.retainLN 0), (str.uppercase 0), (str.lowercase 0), (ite 2 0 0), "", ",", v0]
1: (ntInt: Int) -> [-1, 1, 2, 3, 4, 5, (int.+ 1 1), (int.neg 1), (list.len 0), (str.count 0 0), (str.to.int 0), -1, 1, 2, 3, 4, 5]
2: (ntBool: Bool) -> [(int.is0 1), (int.is+ 1), (int.isN 1)]
3: (ntList: (List String)) -> [(str.split 0 0), (list.filter 3)]
[0m synthphonia/src/main.rs:187
[32mDEBG[0m [36mExamples: ["9", "1"][0m synthphonia/src/main.rs:189
[34;1m[1mINFO[0m [36mDeduction: StrDeducer { nt: 0, split_once: (0, 5), join: (2, 3), ite_concat: (2, 2), index: (3, 1), formatter: [], decay_rate: 900 }[0m synthphonia/src/backward/mod.rs:124
[34;1m[1mINFO[0m [36mFilter Cfg 0: (ntBool: Bool) -> [(int.is0 1), (int.is+ 1), (int.isN 1)]
1: (ntInt: Int) -> [-1, 1, 2, 3, 4, 5, (int.+ 1 1), (int.neg 1), (list.len 2), (str.count 2 2), (str.to.int 2), -1, 1, 2, 3, 4, 5]
2: (ntString: String) -> ["", ",", (str.++ 2 2), (list.at 3 1), (str.join 3 2), (int.to.str 1), (str.retainLl 2), (str.retainLc 2), (str.retainL 2), (str.retainN 2), (str.retainLN 2), (str.uppercase 2), (str.lowercase 2), (ite 0 2 2), "", ",", v0]
3: (ntList: (List String)) -> [(str.split 2 2), (list.filter 3)]
[0m synthphonia/src/backward/mod.rs:143
[34;1m[1mINFO[0m [36mDeduction Configuration: [StrDeducer { nt: 0, split_once: (0, 5), join: (2, 3), ite_concat: (2, 2), index: (3, 1), formatter: [], decay_rate: 900 }, IntDeducer { nt: 1, len: 0 }, SimpleDeducer { nt: 2 }, ListDeducer { nt: 3, map: None, filter: Some(0: (ntBool: Bool) -> [(int.is0 1), (int.is+ 1), (int.isN 1)]
1: (ntInt: Int) -> [-1, 1, 2, 3, 4, 5, (int.+ 1 1), (int.neg 1), (list.len 2), (str.count 2 2), (str.to.int 2), -1, 1, 2, 3, 4, 5]
2: (ntString: String) -> ["", ",", (str.++ 2 2), (list.at 3 1), (str.join 3 2), (int.to.str 1), (str.retainLl 2), (str.retainLc 2), (str.retainL 2), (str.retainN 2), (str.retainLN 2), (str.uppercase 2), (str.lowercase 2), (ite 0 2 2), "", ",", v0]
3: (ntList: (List String)) -> [(str.split 2 2), (list.filter 3)]
) }][0m synthphonia/src/main.rs:204
[32mDEBG[0m [36mDeducing subproblem: 0 ["9", "1"][0m synthphonia/src/backward/str.rs:113
[34;1m[1mINFO[0m [36mEnumerating size=1 nt=ntString with - 0[0m synthphonia/src/forward/executor.rs:245
[32mDEBG[0m [36mStrDeducer::ite_concat 0 ["9", "1"] ["", ""] 0 0[0m synthphonia/src/backward/str.rs:232
[34;1m[1mINFO[0m [36mSearching size=1 [1] - "," [",", ","] 1[0m synthphonia/src/forward/executor.rs:217
[34;1m[1mINFO[0m [36mEnumerating size=1 nt=ntInt with - 5[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=1 nt=ntBool with - 17[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=1 nt=ntList with - 17[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=2 nt=ntString with - 17[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=2 nt=ntInt with - 17[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=2 nt=ntBool with - 29[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=2 nt=ntList with - 47[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=3 nt=ntString with - 47[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=3 nt=ntInt with - 62[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=3 nt=ntBool with - 104[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=3 nt=ntList with - 122[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=4 nt=ntString with - 131[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=4 nt=ntInt with - 137[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=4 nt=ntBool with - 244[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=4 nt=ntList with - 262[0m synthphonia/src/forward/executor.rs:245
[34;1m[1mINFO[0m [36mEnumerating size=5 nt=ntString with - 262[0m synthphonia/src/forward/executor.rs:245
[32mDEBG[0m [36mSubproblem ["9", "1"] solved[0m synthphonia/src/backward/mod.rs:178
